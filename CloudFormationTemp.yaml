AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Photo Upload Web Application.

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'assignment-photo-bucket'
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'error.html'

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Origin access identity for assignment-photo-bucket'

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: 'AssigmentPhotoAPI'
      CorsConfiguration:
        AllowHeaders: 
          - '*'
        AllowMethods: 
          - '*'
        AllowOrigins: 
          - '*'
        ExposeHeaders: 
          - 'access-control-allow-origin'
        MaxAge: 300


    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AssignmentPhotoAPI
      RouteKey: 'POST /getDownloadPreSignedUrl'
      Target: !Join
       - /
       - - integrations
         - !Ref   

  Integration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref HTTPApi
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt MyLambdaFunction.Arn
          - /invocations
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: 'nodejs20.x'

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaS3DynamoDBPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !GetAtt S3Bucket.Arn
              - Effect: Allow
                Action:
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                Resource: !GetAtt DynamoDBTable.Arn
      # Additional policies for CloudWatch, etc.

  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'AssignmentPhoto'
      AttributeDefinitions:
        - AttributeName: 'photoID'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'photoID'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'

Outputs:
  WebsiteURL:
    Value: !GetAtt ['S3Bucket', 'WebsiteURL']
    Description: 'URL for website hosted on S3'
  CloudFrontDomainName:
    Value: !GetAtt ['CloudFrontDistribution', 'DomainName']
    Description: 'The domain name of the CloudFront distribution'